{"messages":[{"role":"user","content":"Write a SQL query to list all students enrolled in the course 'Database Systems'."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID WHERE C.COURSENAME = 'Database Systems';"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to update the birthdate of a student with STUDENTID = 101."},{"role":"assistant","content":"BEGIN\n  UPDATE A_STUDENTS\n  SET BIRTHDATE = TO_DATE('1999-05-21', 'YYYY-MM-DD')\n  WHERE STUDENTID = 101;\n  COMMIT;\nEND;"}]}
{"messages":[{"role":"user","content":"Create a SQL query to list all professors and their respective departments."},{"role":"assistant","content":"SELECT P.PROFNAME, D.DEPTNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count the number of courses in each department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_DEPARTMENTS D JOIN A_COURSES C ON D.DEPTID = C.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to enroll a student into a course given student ID and course ID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE enroll_student(p_studentid IN NUMBER, p_courseid IN NUMBER) IS BEGIN INSERT INTO A_ENROLLMENTS(STUDENTID, COURSEID, ENROLLDATE) VALUES (p_studentid, p_courseid, SYSDATE); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students who enrolled after January 1, 2023."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE E.ENROLLDATE > TO_DATE('2023-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Generate a script to create an index on DEPTID in the A_PROFESSORS table."},{"role":"assistant","content":"CREATE INDEX idx_deptid ON A_PROFESSORS(DEPTID);"}]}
{"messages":[{"role":"user","content":"Create a DBMS_SCHEDULER job to run a student report every Friday at 6 PM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'student_report_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN -- your logic here END;', start_date => SYSTIMESTAMP, repeat_interval => 'FREQ=WEEKLY; BYDAY=FRI; BYHOUR=18; BYMINUTE=0; BYSECOND=0;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE statement to modify the length of LASTNAME in A_STUDENTS to 100."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY LASTNAME VARCHAR2(100);"}]}
{"messages":[{"role":"user","content":"Fix this SQL query: SELECT * FROM A_COURSES WHERE COURSE = 'Math';"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE COURSENAME = 'Math';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the full names of all students."},{"role":"assistant","content":"SELECT FIRSTNAME || ' ' || LASTNAME AS FULLNAME FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Create a SQL query to find professors who do not teach any course."},{"role":"assistant","content":"SELECT P.PROFNAME FROM A_PROFESSORS P WHERE P.PROFID NOT IN (SELECT DISTINCT PROFID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to log enrollment inserts into a custom log table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_enrollment AFTER INSERT ON A_ENROLLMENTS FOR EACH ROW BEGIN INSERT INTO ENROLLMENT_LOG(STUDENTID, COURSEID, ENROLLDATE) VALUES (:NEW.STUDENTID, :NEW.COURSEID, :NEW.ENROLLDATE); END;"}]}
{"messages":[{"role":"user","content":"Write a SQL script to export the A_STUDENTS table to a dump file."},{"role":"assistant","content":"expdp username/password tables=A_STUDENTS directory=DATA_PUMP_DIR dumpfile=students.dmp logfile=students.log"}]}
{"messages":[{"role":"user","content":"Fix this SQL query: SELECT PROFNAME FROM A_PROFESSORS JOIN A_DEPARTMENTS ON DEPTID;"},{"role":"assistant","content":"SELECT PROFNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list courses along with the number of enrolled students."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS ENROLL_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to delete a course by COURSEID if no student is enrolled in it."},{"role":"assistant","content":"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE COURSEID = 101; IF v_count = 0 THEN DELETE FROM A_COURSES WHERE COURSEID = 101; COMMIT; END IF; END;"}]}
{"messages":[{"role":"user","content":"Create a SQL query to find the department name of each student."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME, D.DEPTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list courses taught by professors in the 'Computer Science' department."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Computer Science';"}]}
{"messages":[{"role":"user","content":"Fix the SQL query: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE > 2022-01-01;"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE > TO_DATE('2022-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all students enrolled in more than one course."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID GROUP BY S.FIRSTNAME, S.LASTNAME HAVING COUNT(E.COURSEID) > 1;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL function to return the number of students enrolled in a given course ID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_enrollment_count(p_courseid NUMBER) RETURN NUMBER IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE COURSEID = p_courseid; RETURN v_count; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses not taken by any student."},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE COURSEID NOT IN (SELECT DISTINCT COURSEID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Generate a command to drop the index named idx_courseid on A_COURSES."},{"role":"assistant","content":"DROP INDEX idx_courseid;"}]}
{"messages":[{"role":"user","content":"Write a DBMS_SCHEDULER job to update a report table every 12 hours."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'report_update_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN -- report logic here END;', start_date => SYSTIMESTAMP, repeat_interval => 'FREQ=HOURLY; INTERVAL=12;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Create an ALTER TABLE script to drop the PROFID column from A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES DROP COLUMN PROFID;"}]}
{"messages":[{"role":"user","content":"Fix the SQL error in: SELECT * A_PROFESSORS WHERE DEPTID = 10;"},{"role":"assistant","content":"SELECT * FROM A_PROFESSORS WHERE DEPTID = 10;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find the oldest student."},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME, BIRTHDATE FROM A_STUDENTS WHERE BIRTHDATE = (SELECT MIN(BIRTHDATE) FROM A_STUDENTS);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block that logs deleted course names into a backup table before deletion."},{"role":"assistant","content":"DECLARE v_name VARCHAR2(100); BEGIN SELECT COURSENAME INTO v_name FROM A_COURSES WHERE COURSEID = 201; INSERT INTO COURSE_BACKUP(COURSENAME, DELETED_AT) VALUES(v_name, SYSDATE); DELETE FROM A_COURSES WHERE COURSEID = 201; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list each department and the number of professors in it."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(P.PROFID) AS PROFESSOR_COUNT FROM A_DEPARTMENTS D LEFT JOIN A_PROFESSORS P ON D.DEPTID = P.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get professor names who teach more than 2 courses."},{"role":"assistant","content":"SELECT P.PROFNAME FROM A_PROFESSORS P JOIN A_COURSES C ON P.PROFID = C.PROFID GROUP BY P.PROFNAME HAVING COUNT(C.COURSEID) > 2;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update a student's last name given student ID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_lastname(p_id IN NUMBER, p_lastname IN VARCHAR2) IS BEGIN UPDATE A_STUDENTS SET LASTNAME = p_lastname WHERE STUDENTID = p_id; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Fix the error: SELECT COUNT FROM A_COURSES;"},{"role":"assistant","content":"SELECT COUNT(*) FROM A_COURSES;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all departments that have at least one course assigned."},{"role":"assistant","content":"SELECT DISTINCT D.DEPTNAME FROM A_DEPARTMENTS D JOIN A_COURSES C ON D.DEPTID = C.DEPTID;"}]}
{"messages":[{"role":"user","content":"Generate an export command for all tables in the schema."},{"role":"assistant","content":"expdp username/password schemas=your_schema_name directory=DATA_PUMP_DIR dumpfile=full_export.dmp logfile=full_export.log"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list courses along with their professor's name."},{"role":"assistant","content":"SELECT C.COURSENAME, P.PROFNAME FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to show students and their age."},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME, FLOOR(MONTHS_BETWEEN(SYSDATE, BIRTHDATE)/12) AS AGE FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all professors without departments assigned."},{"role":"assistant","content":"SELECT PROFNAME FROM A_PROFESSORS WHERE DEPTID IS NULL;"}]}
{"messages":[{"role":"user","content":"Fix: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = '2022-10-01';"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = TO_DATE('2022-10-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to transfer a student from one course to another."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE transfer_student(p_studentid NUMBER, p_old_course NUMBER, p_new_course NUMBER) IS BEGIN DELETE FROM A_ENROLLMENTS WHERE STUDENTID = p_studentid AND COURSEID = p_old_course; INSERT INTO A_ENROLLMENTS(STUDENTID, COURSEID, ENROLLDATE) VALUES (p_studentid, p_new_course, SYSDATE); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all courses along with the number of students enrolled in each."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS STUDENT_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to increase all student IDs by 1000."},{"role":"assistant","content":"BEGIN UPDATE A_STUDENTS SET STUDENTID = STUDENTID + 1000; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create an index on the ENROLLDATE column of A_ENROLLMENTS."},{"role":"assistant","content":"CREATE INDEX idx_enrolldate ON A_ENROLLMENTS(ENROLLDATE);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the full name and age of all students born after 2000."},{"role":"assistant","content":"SELECT FIRSTNAME || ' ' || LASTNAME AS FULLNAME, FLOOR(MONTHS_BETWEEN(SYSDATE, BIRTHDATE)/12) AS AGE FROM A_STUDENTS WHERE BIRTHDATE > TO_DATE('2000-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Fix the SQL query: SELECT FROM A_STUDENTS WHERE FIRSTNAME = 'John';"},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE FIRSTNAME = 'John';"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to insert a new professor with ID 301 and name 'Dr. Stone' into department 10."},{"role":"assistant","content":"BEGIN INSERT INTO A_PROFESSORS(PROFID, PROFNAME, DEPTID) VALUES (301, 'Dr. Stone', 10); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to retrieve the top 5 most recent enrollments."},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS ORDER BY ENROLLDATE DESC FETCH FIRST 5 ROWS ONLY;"}]}
{"messages":[{"role":"user","content":"Generate a CRON expression to run a script every day at 1 AM."},{"role":"assistant","content":"0 1 * * *"}]}
{"messages":[{"role":"user","content":"Create an ALTER TABLE command to rename the column COURSENAME to TITLE in A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES RENAME COLUMN COURSENAME TO TITLE;"}]}
{"messages":[{"role":"user","content":"Fix the error in: SELECT * FROM A_COURSES WHERE COURSEID = 'CS101';"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE COURSEID = 101; -- assuming COURSEID is numeric"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list the departments that have no professors."},{"role":"assistant","content":"SELECT D.DEPTNAME FROM A_DEPARTMENTS D LEFT JOIN A_PROFESSORS P ON D.DEPTID = P.DEPTID WHERE P.PROFID IS NULL;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to prevent deletion of any student enrolled in a course."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER prevent_student_delete BEFORE DELETE ON A_STUDENTS FOR EACH ROW BEGIN IF EXISTS (SELECT 1 FROM A_ENROLLMENTS WHERE STUDENTID = :OLD.STUDENTID) THEN RAISE_APPLICATION_ERROR(-20001, 'Cannot delete student who is enrolled in a course.'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Generate a data pump import command for A_PROFESSORS."},{"role":"assistant","content":"impdp username/password tables=A_PROFESSORS directory=DATA_PUMP_DIR dumpfile=professors.dmp logfile=professors_import.log"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the number of students per course, showing courses with zero students too."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS STUDENT_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students whose last names start with 'S'."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE LASTNAME LIKE 'S%';"}]}
{"messages":[{"role":"user","content":"Fix this SQL: SELECT * FROM A_PROFESSORS WHERE DEPTNAME = 'Engineering';"},{"role":"assistant","content":"SELECT P.* FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Engineering';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find professors who share the same department."},{"role":"assistant","content":"SELECT P1.PROFNAME AS PROF1, P2.PROFNAME AS PROF2, D.DEPTNAME FROM A_PROFESSORS P1 JOIN A_PROFESSORS P2 ON P1.DEPTID = P2.DEPTID AND P1.PROFID < P2.PROFID JOIN A_DEPARTMENTS D ON P1.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to remove all students who are not enrolled in any course."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE remove_unenrolled_students IS BEGIN DELETE FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT DISTINCT STUDENTID FROM A_ENROLLMENTS); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to calculate the average age of students."},{"role":"assistant","content":"SELECT AVG(FLOOR(MONTHS_BETWEEN(SYSDATE, BIRTHDATE)/12)) AS AVG_AGE FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to add a column EMAIL to A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS ADD (EMAIL VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students along with the courses they are enrolled in."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME, C.COURSENAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to assign all students to a default course with ID 100."},{"role":"assistant","content":"BEGIN FOR r IN (SELECT STUDENTID FROM A_STUDENTS) LOOP INSERT INTO A_ENROLLMENTS(STUDENTID, COURSEID, ENROLLDATE) VALUES (r.STUDENTID, 100, SYSDATE); END LOOP; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE statement to change the length of FIRSTNAME in A_STUDENTS to 100."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY (FIRSTNAME VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT PROFID, COUNT(*) FROM A_COURSES;"},{"role":"assistant","content":"SELECT PROFID, COUNT(*) FROM A_COURSES GROUP BY PROFID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students who enrolled in 2023."},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE EXTRACT(YEAR FROM ENROLLDATE) = 2023;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to automatically set ENROLLDATE to current date if NULL during insert."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER set_enroll_date BEFORE INSERT ON A_ENROLLMENTS FOR EACH ROW BEGIN IF :NEW.ENROLLDATE IS NULL THEN :NEW.ENROLLDATE := SYSDATE; END IF; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses that have no assigned professor."},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE PROFID IS NULL;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_STUDENTS ORDER BY AGE DESC;"},{"role":"assistant","content":"SELECT *, FLOOR(MONTHS_BETWEEN(SYSDATE, BIRTHDATE)/12) AS AGE FROM A_STUDENTS ORDER BY AGE DESC;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to update department name from 'Science' to 'Natural Sciences'."},{"role":"assistant","content":"BEGIN UPDATE A_DEPARTMENTS SET DEPTNAME = 'Natural Sciences' WHERE DEPTNAME = 'Science'; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all enrollments that happened in the last 7 days."},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE >= SYSDATE - 7;"}]}
{"messages":[{"role":"user","content":"Create an index on the DEPTNAME column of A_DEPARTMENTS."},{"role":"assistant","content":"CREATE INDEX idx_deptname ON A_DEPARTMENTS(DEPTNAME);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL function that returns the department name of a professor by PROFID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_prof_dept(p_profid NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT D.DEPTNAME INTO v_name FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE P.PROFID = p_profid; RETURN v_name; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get students born before 1990."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE < TO_DATE('1990-01-01','YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Fix the SQL: DELETE A_ENROLLMENTS WHERE COURSEID = 50;"},{"role":"assistant","content":"DELETE FROM A_ENROLLMENTS WHERE COURSEID = 50;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count the number of departments with more than 3 professors."},{"role":"assistant","content":"SELECT COUNT(*) FROM (SELECT DEPTID FROM A_PROFESSORS GROUP BY DEPTID HAVING COUNT(*) > 3);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to backup A_PROFESSORS into a table A_PROFESSORS_BAK."},{"role":"assistant","content":"BEGIN INSERT INTO A_PROFESSORS_BAK SELECT * FROM A_PROFESSORS; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to drop the EMAIL column from A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS DROP COLUMN EMAIL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list the first and last names of students enrolled in course ID 200."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE E.COURSEID = 200;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list professors and the number of courses they teach."},{"role":"assistant","content":"SELECT P.PROFNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_PROFESSORS P LEFT JOIN A_COURSES C ON P.PROFID = C.PROFID GROUP BY P.PROFNAME;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to delete a professor by ID if not teaching any course."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE delete_free_professor(p_profid NUMBER) IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_COURSES WHERE PROFID = p_profid; IF v_count = 0 THEN DELETE FROM A_PROFESSORS WHERE PROFID = p_profid; COMMIT; END IF; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the number of students enrolled in each department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(E.STUDENTID) AS STUDENT_COUNT FROM A_DEPARTMENTS D JOIN A_PROFESSORS P ON D.DEPTID = P.DEPTID JOIN A_COURSES C ON P.PROFID = C.PROFID JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to insert a student if they do not already exist."},{"role":"assistant","content":"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_STUDENTS WHERE STUDENTID = 123; IF v_count = 0 THEN INSERT INTO A_STUDENTS(STUDENTID, FIRSTNAME, LASTNAME, BIRTHDATE) VALUES (123, 'Alice', 'Walker', TO_DATE('2002-03-15','YYYY-MM-DD')); END IF; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all courses and their department names."},{"role":"assistant","content":"SELECT C.COURSENAME, D.DEPTNAME FROM A_COURSES C JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: INSERT INTO A_ENROLLMENTS VALUES (1001, NULL, SYSDATE);"},{"role":"assistant","content":"INSERT INTO A_ENROLLMENTS(STUDENTID, COURSEID, ENROLLDATE) VALUES (1001, <course_id>, SYSDATE); -- Replace <course_id> with a valid value"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all students who are not enrolled in any course."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT DISTINCT STUDENTID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to log inserts into A_COURSES into a log table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_course_insert AFTER INSERT ON A_COURSES FOR EACH ROW BEGIN INSERT INTO A_COURSES_LOG(COURSEID, LOG_DATE) VALUES (:NEW.COURSEID, SYSDATE); END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get course names and number of students per course, sorted descending."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS STUDENT_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME ORDER BY STUDENT_COUNT DESC;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to add a CHECK constraint on BIRTHDATE to ensure it's before today."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS ADD CONSTRAINT chk_birthdate CHECK (BIRTHDATE < SYSDATE);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: UPDATE A_DEPARTMENTS SET DEPTNAME = Engineering WHERE DEPTID = 5;"},{"role":"assistant","content":"UPDATE A_DEPARTMENTS SET DEPTNAME = 'Engineering' WHERE DEPTID = 5;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count enrollments per month in 2024."},{"role":"assistant","content":"SELECT TO_CHAR(ENROLLDATE, 'YYYY-MM') AS MONTH, COUNT(*) AS ENROLL_COUNT FROM A_ENROLLMENTS WHERE ENROLLDATE BETWEEN TO_DATE('2024-01-01', 'YYYY-MM-DD') AND TO_DATE('2024-12-31', 'YYYY-MM-DD') GROUP BY TO_CHAR(ENROLLDATE, 'YYYY-MM') ORDER BY MONTH;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL function to return student full name by ID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_student_name(p_id NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT FIRSTNAME || ' ' || LASTNAME INTO v_name FROM A_STUDENTS WHERE STUDENTID = p_id; RETURN v_name; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get professors who are not assigned to any course."},{"role":"assistant","content":"SELECT * FROM A_PROFESSORS WHERE PROFID NOT IN (SELECT DISTINCT PROFID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Create an index on the COURSEID column of A_ENROLLMENTS."},{"role":"assistant","content":"CREATE INDEX idx_courseid_enroll ON A_ENROLLMENTS(COURSEID);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the number of courses per department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_DEPARTMENTS D LEFT JOIN A_COURSES C ON D.DEPTID = C.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT ENROLLDATE FROM A_ENROLLMENTS WHERE ENROLLDATE = '2024-01-15';"},{"role":"assistant","content":"SELECT ENROLLDATE FROM A_ENROLLMENTS WHERE ENROLLDATE = TO_DATE('2024-01-15', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to delete enrollments older than 5 years."},{"role":"assistant","content":"BEGIN DELETE FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -60); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students and their birth years."},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME, EXTRACT(YEAR FROM BIRTHDATE) AS BIRTH_YEAR FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to update professor names to uppercase."},{"role":"assistant","content":"BEGIN UPDATE A_PROFESSORS SET PROFNAME = UPPER(PROFNAME); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the total number of students."},{"role":"assistant","content":"SELECT COUNT(*) AS TOTAL_STUDENTS FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COURSENAME FROM A_COURSES WHERE DEPTID IN '10,20';"},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE DEPTID IN (10, 20);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all professors with their department names."},{"role":"assistant","content":"SELECT P.PROFNAME, D.DEPTNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to enroll a student into a course given student ID and course ID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE enroll_student(p_studentid NUMBER, p_courseid NUMBER) IS BEGIN INSERT INTO A_ENROLLMENTS (STUDENTID, COURSEID, ENROLLDATE) VALUES (p_studentid, p_courseid, SYSDATE); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find all students who have never enrolled in any course."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT STUDENTID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_COURSES WHERE COURSENAME = \"Mathematics\";"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE COURSENAME = 'Mathematics';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count how many students enrolled in each course."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS ENROLL_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to prevent inserting a course with an empty COURSENAME."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_check_course_name BEFORE INSERT ON A_COURSES FOR EACH ROW BEGIN IF :NEW.COURSENAME IS NULL OR TRIM(:NEW.COURSENAME) = '' THEN RAISE_APPLICATION_ERROR(-20001, 'Course name cannot be empty'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE statement to add a new column COURSE_DESCRIPTION to A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES ADD COURSE_DESCRIPTION VARCHAR2(255);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the last names of students born after 2000."},{"role":"assistant","content":"SELECT LASTNAME FROM A_STUDENTS WHERE BIRTHDATE > TO_DATE('2000-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT PROFNAME FROM A_PROFESSORS WHERE DEPTID = '5';"},{"role":"assistant","content":"SELECT PROFNAME FROM A_PROFESSORS WHERE DEPTID = 5;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all courses taught by professor 'John Smith'."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID WHERE P.PROFNAME = 'John Smith';"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to update all student last names to 'Doe' where last name is NULL."},{"role":"assistant","content":"BEGIN UPDATE A_STUDENTS SET LASTNAME = 'Doe' WHERE LASTNAME IS NULL; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find departments with no professors assigned."},{"role":"assistant","content":"SELECT D.DEPTNAME FROM A_DEPARTMENTS D WHERE D.DEPTID NOT IN (SELECT DISTINCT DEPTID FROM A_PROFESSORS);"}]}
{"messages":[{"role":"user","content":"Create an index on STUDENTID in A_ENROLLMENTS for faster searches."},{"role":"assistant","content":"CREATE INDEX idx_studentid_enroll ON A_ENROLLMENTS(STUDENTID);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count the number of professors per department."},{"role":"assistant","content":"SELECT DEPTID, COUNT(*) AS PROF_COUNT FROM A_PROFESSORS GROUP BY DEPTID;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: DELETE A_ENROLLMENTS WHERE STUDENTID = 123;"},{"role":"assistant","content":"DELETE FROM A_ENROLLMENTS WHERE STUDENTID = 123;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all courses whose names start with 'Intro'."},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE COURSENAME LIKE 'Intro%';"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to change a professor's department given PROFID and new DEPTID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_prof_dept(p_profid NUMBER, p_deptid NUMBER) IS BEGIN UPDATE A_PROFESSORS SET DEPTID = p_deptid WHERE PROFID = p_profid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses with more than 10 students enrolled."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME HAVING COUNT(E.STUDENTID) > 10;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to rename column COURSENAME to COURSE_TITLE in A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES RENAME COLUMN COURSENAME TO COURSE_TITLE;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_STUDENTS WHERE FIRSTNAME = John;"},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE FIRSTNAME = 'John';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all students enrolled in the 'Computer Science' department."},{"role":"assistant","content":"SELECT S.* FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Computer Science';"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update a course name given COURSEID and new name."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_course_name(p_courseid NUMBER, p_newname VARCHAR2) IS BEGIN UPDATE A_COURSES SET COURSENAME = p_newname WHERE COURSEID = p_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all departments with the number of courses offered."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(C.COURSEID) AS NUM_COURSES FROM A_DEPARTMENTS D LEFT JOIN A_COURSES C ON D.DEPTID = C.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: INSERT INTO A_PROFESSORS(PROFID, PROFNAME, DEPTID) VALUES (101, 'Dr. Smith', '10');"},{"role":"assistant","content":"INSERT INTO A_PROFESSORS(PROFID, PROFNAME, DEPTID) VALUES (101, 'Dr. Smith', 10);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students enrolled in more than 3 courses."},{"role":"assistant","content":"SELECT STUDENTID, COUNT(COURSEID) AS COURSE_COUNT FROM A_ENROLLMENTS GROUP BY STUDENTID HAVING COUNT(COURSEID) > 3;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to delete a course by COURSEID if no students are enrolled."},{"role":"assistant","content":"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE COURSEID = 123; IF v_count = 0 THEN DELETE FROM A_COURSES WHERE COURSEID = 123; COMMIT; END IF; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get professor names who teach courses in 'Mathematics' department."},{"role":"assistant","content":"SELECT DISTINCT P.PROFNAME FROM A_PROFESSORS P JOIN A_COURSES C ON P.PROFID = C.PROFID JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Mathematics';"}]}
{"messages":[{"role":"user","content":"Create an index on DEPTID in A_PROFESSORS table."},{"role":"assistant","content":"CREATE INDEX idx_deptid_prof ON A_PROFESSORS(DEPTID);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = 2024-05-01;"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = TO_DATE('2024-05-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the total number of enrollments per course."},{"role":"assistant","content":"SELECT COURSEID, COUNT(*) AS ENROLL_COUNT FROM A_ENROLLMENTS GROUP BY COURSEID;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to add a new department."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE add_department(p_deptid NUMBER, p_deptname VARCHAR2) IS BEGIN INSERT INTO A_DEPARTMENTS(DEPTID, DEPTNAME) VALUES (p_deptid, p_deptname); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students who enrolled in courses after '2023-01-01'."},{"role":"assistant","content":"SELECT DISTINCT S.* FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE E.ENROLLDATE > TO_DATE('2023-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Fix the SQL: UPDATE A_STUDENTS SET FIRSTNAME = 'Anna WHERE STUDENTID = 555;"},{"role":"assistant","content":"UPDATE A_STUDENTS SET FIRSTNAME = 'Anna' WHERE STUDENTID = 555;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get courses that have no enrollments."},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE COURSEID NOT IN (SELECT DISTINCT COURSEID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to update a log table on deletion from A_STUDENTS."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_student_delete AFTER DELETE ON A_STUDENTS FOR EACH ROW BEGIN INSERT INTO STUDENT_DELETE_LOG(STUDENTID, DELETE_DATE) VALUES (:OLD.STUDENTID, SYSDATE); END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all students ordered by birthdate descending."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS ORDER BY BIRTHDATE DESC;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to drop column PROFID from A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES DROP COLUMN PROFID;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_DEPARTMENTS WHERE DEPTNAME LIKE '%Engin%';"},{"role":"assistant","content":"SELECT * FROM A_DEPARTMENTS WHERE DEPTNAME LIKE '%Engin%';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get students who have both first and last name starting with 'J'."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE FIRSTNAME LIKE 'J%' AND LASTNAME LIKE 'J%';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find the department name of professor with PROFID = 20."},{"role":"assistant","content":"SELECT D.DEPTNAME FROM A_DEPARTMENTS D JOIN A_PROFESSORS P ON D.DEPTID = P.DEPTID WHERE P.PROFID = 20;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function that returns the number of courses a student is enrolled in given STUDENTID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_course_count(p_studentid NUMBER) RETURN NUMBER IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE STUDENTID = p_studentid; RETURN v_count; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all courses offered by the 'Engineering' department."},{"role":"assistant","content":"SELECT C.* FROM A_COURSES C JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Engineering';"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_STUDENTS WHERE BIRTHDATE > '2000-01-01';"},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE > TO_DATE('2000-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find professors who do not teach any courses."},{"role":"assistant","content":"SELECT P.* FROM A_PROFESSORS P WHERE P.PROFID NOT IN (SELECT DISTINCT PROFID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to increase the length of COURSENAME to 150 characters."},{"role":"assistant","content":"BEGIN EXECUTE IMMEDIATE 'ALTER TABLE A_COURSES MODIFY COURSENAME VARCHAR2(150)'; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students who enrolled in a course in 2024."},{"role":"assistant","content":"SELECT DISTINCT S.* FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE EXTRACT(YEAR FROM E.ENROLLDATE) = 2024;"}]}
{"messages":[{"role":"user","content":"Create an index on ENROLLDATE column in A_ENROLLMENTS."},{"role":"assistant","content":"CREATE INDEX idx_enrolldate ON A_ENROLLMENTS(ENROLLDATE);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: INSERT INTO A_STUDENTS (STUDENTID, FIRSTNAME, LASTNAME) VALUES (1, 'Alice', NULL);"},{"role":"assistant","content":"INSERT INTO A_STUDENTS (STUDENTID, FIRSTNAME, LASTNAME) VALUES (1, 'Alice', NULL);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses taught by professor named 'Emily Clark'."},{"role":"assistant","content":"SELECT C.* FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID WHERE P.PROFNAME = 'Emily Clark';"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to delete a student given STUDENTID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE delete_student(p_studentid NUMBER) IS BEGIN DELETE FROM A_STUDENTS WHERE STUDENTID = p_studentid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all students along with their enrolled courses."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME, C.COURSENAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: UPDATE A_COURSES SET PROFID = 'abc' WHERE COURSEID = 10;"},{"role":"assistant","content":"UPDATE A_COURSES SET PROFID = NULL WHERE COURSEID = 10; -- or set to a valid PROFID number"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count the number of courses each professor teaches."},{"role":"assistant","content":"SELECT PROFID, COUNT(*) AS COURSE_COUNT FROM A_COURSES GROUP BY PROFID;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to prevent deletion of departments that have assigned professors."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_prevent_dept_delete BEFORE DELETE ON A_DEPARTMENTS FOR EACH ROW DECLARE v_prof_count NUMBER; BEGIN SELECT COUNT(*) INTO v_prof_count FROM A_PROFESSORS WHERE DEPTID = :OLD.DEPTID; IF v_prof_count > 0 THEN RAISE_APPLICATION_ERROR(-20002, 'Cannot delete department with assigned professors'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all professors ordered by their department name."},{"role":"assistant","content":"SELECT P.PROFNAME, D.DEPTNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID ORDER BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE statement to add a NOT NULL constraint on FIRSTNAME in A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY FIRSTNAME VARCHAR2(50) NOT NULL;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE COURSEID = ;"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE COURSEID IS NOT NULL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get courses with no assigned professor."},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE PROFID IS NULL;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to commit transactions only if no errors occurred."},{"role":"assistant","content":"BEGIN -- Your SQL statements here EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to retrieve all students with their enrolled courses and enrollment dates."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME, C.COURSENAME, E.ENROLLDATE FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to add a new professor with PROFID, PROFNAME, and DEPTID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE add_professor(p_profid NUMBER, p_profname VARCHAR2, p_deptid NUMBER) IS BEGIN INSERT INTO A_PROFESSORS (PROFID, PROFNAME, DEPTID) VALUES (p_profid, p_profname, p_deptid); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses with enrollment counts between 5 and 20."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS ENROLL_COUNT FROM A_COURSES C JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME HAVING COUNT(E.STUDENTID) BETWEEN 5 AND 20;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: DELETE FROM A_STUDENTS WHERE STUDENTID = 'abc';"},{"role":"assistant","content":"DELETE FROM A_STUDENTS WHERE STUDENTID = NULL; -- or use a valid numeric STUDENTID"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the oldest student in the database."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE = (SELECT MIN(BIRTHDATE) FROM A_STUDENTS);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL function to return the department name given DEPTID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_dept_name(p_deptid NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT DEPTNAME INTO v_name FROM A_DEPARTMENTS WHERE DEPTID = p_deptid; RETURN v_name; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find professors who teach more than 2 courses."},{"role":"assistant","content":"SELECT PROFID, COUNT(*) AS COURSE_COUNT FROM A_COURSES GROUP BY PROFID HAVING COUNT(*) > 2;"}]}
{"messages":[{"role":"user","content":"Create an index on COURSEID in A_ENROLLMENTS."},{"role":"assistant","content":"CREATE INDEX idx_courseid_enroll ON A_ENROLLMENTS(COURSEID);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT FIRSTNAME, LASTNAME FROM A_STUDENTS WHERE STUDENTID = ;"},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME FROM A_STUDENTS WHERE STUDENTID IS NOT NULL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get all courses that a professor with name 'Lisa Brown' teaches."},{"role":"assistant","content":"SELECT C.* FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID WHERE P.PROFNAME = 'Lisa Brown';"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL procedure to update a student's last name given STUDENTID and new last name."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_student_lastname(p_studentid NUMBER, p_lastname VARCHAR2) IS BEGIN UPDATE A_STUDENTS SET LASTNAME = p_lastname WHERE STUDENTID = p_studentid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find departments without any courses."},{"role":"assistant","content":"SELECT D.DEPTNAME FROM A_DEPARTMENTS D WHERE D.DEPTID NOT IN (SELECT DISTINCT DEPTID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to log inserts into A_ENROLLMENTS."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_enrollment_insert AFTER INSERT ON A_ENROLLMENTS FOR EACH ROW BEGIN INSERT INTO ENROLLMENT_LOG (STUDENTID, COURSEID, ENROLLDATE, LOG_DATE) VALUES (:NEW.STUDENTID, :NEW.COURSEID, :NEW.ENROLLDATE, SYSDATE); END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students born between 1990 and 2000."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE BETWEEN TO_DATE('1990-01-01', 'YYYY-MM-DD') AND TO_DATE('2000-12-31', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Fix the SQL: UPDATE A_COURSES SET COURSENAME = NULL WHERE COURSEID = '5';"},{"role":"assistant","content":"UPDATE A_COURSES SET COURSENAME = NULL WHERE COURSEID = 5;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students enrolled in courses taught by 'Dr. Alan'."},{"role":"assistant","content":"SELECT DISTINCT S.* FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_PROFESSORS P ON C.PROFID = P.PROFID WHERE P.PROFNAME = 'Dr. Alan';"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to increase length of LASTNAME in A_STUDENTS to 100 characters."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY LASTNAME VARCHAR2(100);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to assign a course to a professor given COURSEID and PROFID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE assign_course_professor(p_courseid NUMBER, p_profid NUMBER) IS BEGIN UPDATE A_COURSES SET PROFID = p_profid WHERE COURSEID = p_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all courses."},{"role":"assistant","content":"SELECT * FROM A_COURSES;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find all students with last name 'Smith'."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE LASTNAME = 'Smith';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the number of students enrolled in each course."},{"role":"assistant","content":"SELECT COURSEID, COUNT(STUDENTID) AS STUDENT_COUNT FROM A_ENROLLMENTS GROUP BY COURSEID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to enroll a student in a course given STUDENTID and COURSEID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE enroll_student(p_studentid NUMBER, p_courseid NUMBER) IS BEGIN INSERT INTO A_ENROLLMENTS (STUDENTID, COURSEID, ENROLLDATE) VALUES (p_studentid, p_courseid, SYSDATE); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find all professors and the departments they belong to."},{"role":"assistant","content":"SELECT P.PROFNAME, D.DEPTNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get courses without any students enrolled."},{"role":"assistant","content":"SELECT C.* FROM A_COURSES C WHERE C.COURSEID NOT IN (SELECT COURSEID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to update the department name to 'Science' where DEPTID = 10."},{"role":"assistant","content":"BEGIN UPDATE A_DEPARTMENTS SET DEPTNAME = 'Science' WHERE DEPTID = 10; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT FIRSTNAME LASTNAME FROM A_STUDENTS;"},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses taught by professors in the 'Math' department."},{"role":"assistant","content":"SELECT C.* FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Math';"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function to return the total number of students enrolled in a course given COURSEID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_enrollment_count(p_courseid NUMBER) RETURN NUMBER IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE COURSEID = p_courseid; RETURN v_count; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the earliest enrollment date for each student."},{"role":"assistant","content":"SELECT STUDENTID, MIN(ENROLLDATE) AS FIRST_ENROLL FROM A_ENROLLMENTS GROUP BY STUDENTID;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL trigger to prevent deletion of students who are enrolled in any course."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_prevent_student_delete BEFORE DELETE ON A_STUDENTS FOR EACH ROW DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE STUDENTID = :OLD.STUDENTID; IF v_count > 0 THEN RAISE_APPLICATION_ERROR(-20001, 'Cannot delete student enrolled in courses'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list departments and the number of professors in each."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(P.PROFID) AS PROFESSOR_COUNT FROM A_DEPARTMENTS D LEFT JOIN A_PROFESSORS P ON D.DEPTID = P.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: INSERT INTO A_COURSES (COURSEID, COURSENAME, PROFID) VALUES ('100', 'Biology', 10);"},{"role":"assistant","content":"INSERT INTO A_COURSES (COURSEID, COURSENAME, PROFID) VALUES (100, 'Biology', 10);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students who are enrolled in both course 101 and 102."},{"role":"assistant","content":"SELECT STUDENTID FROM A_ENROLLMENTS WHERE COURSEID IN (101, 102) GROUP BY STUDENTID HAVING COUNT(DISTINCT COURSEID) = 2;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update the department of a professor given PROFID and new DEPTID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_prof_dept(p_profid NUMBER, p_deptid NUMBER) IS BEGIN UPDATE A_PROFESSORS SET DEPTID = p_deptid WHERE PROFID = p_profid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the list of professors who do not belong to any department."},{"role":"assistant","content":"SELECT * FROM A_PROFESSORS WHERE DEPTID IS NULL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the total number of enrollments per department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(E.STUDENTID) AS ENROLL_COUNT FROM A_DEPARTMENTS D JOIN A_COURSES C ON D.DEPTID = C.DEPTID JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: UPDATE A_STUDENTS SET BIRTHDATE = '2023-01-01' WHERE STUDENTID = 5;"},{"role":"assistant","content":"UPDATE A_STUDENTS SET BIRTHDATE = TO_DATE('2023-01-01', 'YYYY-MM-DD') WHERE STUDENTID = 5;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the full name of students who enrolled after Jan 1, 2023."},{"role":"assistant","content":"SELECT FIRSTNAME || ' ' || LASTNAME AS FULL_NAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE E.ENROLLDATE > TO_DATE('2023-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL package to manage department operations (insert and fetch)."},{"role":"assistant","content":"CREATE OR REPLACE PACKAGE dept_pkg IS PROCEDURE insert_dept(p_id NUMBER, p_name VARCHAR2); FUNCTION get_dept_name(p_id NUMBER) RETURN VARCHAR2; END dept_pkg; /\nCREATE OR REPLACE PACKAGE BODY dept_pkg IS PROCEDURE insert_dept(p_id NUMBER, p_name VARCHAR2) IS BEGIN INSERT INTO A_DEPARTMENTS (DEPTID, DEPTNAME) VALUES (p_id, p_name); END; FUNCTION get_dept_name(p_id NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT DEPTNAME INTO v_name FROM A_DEPARTMENTS WHERE DEPTID = p_id; RETURN v_name; END; END dept_pkg;"}]}
{"messages":[{"role":"user","content":"Create an index on STUDENTID and COURSEID in A_ENROLLMENTS."},{"role":"assistant","content":"CREATE INDEX idx_enrollment_student_course ON A_ENROLLMENTS(STUDENTID, COURSEID);"}]}
{"messages":[{"role":"user","content":"Create a DBMS_SCHEDULER job to backup students table every night at 2 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'backup_students_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN EXECUTE IMMEDIATE ''CREATE TABLE A_STUDENTS_BACKUP AS SELECT * FROM A_STUDENTS''; END;', start_date => SYSTIMESTAMP, repeat_interval => 'FREQ=DAILY;BYHOUR=2;BYMINUTE=0;BYSECOND=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to add a NOT NULL constraint to COURSENAME."},{"role":"assistant","content":"ALTER TABLE A_COURSES MODIFY COURSENAME VARCHAR2(100) NOT NULL;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = 2023-01-01;"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = TO_DATE('2023-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query using a subquery to find students enrolled in the most popular course."},{"role":"assistant","content":"SELECT S.* FROM A_STUDENTS S WHERE S.STUDENTID IN (SELECT E.STUDENTID FROM A_ENROLLMENTS E WHERE E.COURSEID = (SELECT COURSEID FROM (SELECT COURSEID, COUNT(*) AS CNT FROM A_ENROLLMENTS GROUP BY COURSEID ORDER BY CNT DESC) WHERE ROWNUM = 1));"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to log deleted professors into a backup table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_deleted_professor BEFORE DELETE ON A_PROFESSORS FOR EACH ROW BEGIN INSERT INTO A_PROFESSORS_BACKUP (PROFID, PROFNAME, DEPTID) VALUES (:OLD.PROFID, :OLD.PROFNAME, :OLD.DEPTID); END;"}]}
{"messages":[{"role":"user","content":"Create a tablespace for student data."},{"role":"assistant","content":"CREATE TABLESPACE student_data_tbs DATAFILE 'student_data01.dbf' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;"}]}
{"messages":[{"role":"user","content":"Create a CRON job that runs a SQL query to count student enrollments every hour."},{"role":"assistant","content":"0 * * * * echo \"SELECT COUNT(*) FROM A_ENROLLMENTS;\" | sqlplus user/password@db"}]}
{"messages":[{"role":"user","content":"Export the A_PROFESSORS table using expdp."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=professors.dmp LOGFILE=professors.log TABLES=A_PROFESSORS"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT FROM A_STUDENTS WHERE LASTNAME = 'Smith';"},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE LASTNAME = 'Smith';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count how many courses are taught by each professor."},{"role":"assistant","content":"SELECT PROFID, COUNT(*) AS COURSE_COUNT FROM A_COURSES GROUP BY PROFID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to transfer a student from one course to another."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE transfer_student(p_studentid NUMBER, p_old_courseid NUMBER, p_new_courseid NUMBER) IS BEGIN DELETE FROM A_ENROLLMENTS WHERE STUDENTID = p_studentid AND COURSEID = p_old_courseid; INSERT INTO A_ENROLLMENTS (STUDENTID, COURSEID, ENROLLDATE) VALUES (p_studentid, p_new_courseid, SYSDATE); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create a partitioned table for A_ENROLLMENTS by year of ENROLLDATE."},{"role":"assistant","content":"CREATE TABLE A_ENROLLMENTS_PART (STUDENTID NUMBER, COURSEID NUMBER, ENROLLDATE DATE) PARTITION BY RANGE (ENROLLDATE) (PARTITION p_2022 VALUES LESS THAN (TO_DATE('2023-01-01', 'YYYY-MM-DD')), PARTITION p_2023 VALUES LESS THAN (TO_DATE('2024-01-01', 'YYYY-MM-DD')), PARTITION p_max VALUES LESS THAN (MAXVALUE));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: UPDATE A_DEPARTMENTS SET DEPTNAME = Science WHERE DEPTID = 3;"},{"role":"assistant","content":"UPDATE A_DEPARTMENTS SET DEPTNAME = 'Science' WHERE DEPTID = 3;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find the department with the highest number of courses."},{"role":"assistant","content":"SELECT D.DEPTNAME FROM A_DEPARTMENTS D JOIN A_COURSES C ON D.DEPTID = C.DEPTID GROUP BY D.DEPTNAME ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY;"}]}
{"messages":[{"role":"user","content":"Create a DBMS_SCHEDULER job that runs a course enrollment report every Monday at 9 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'weekly_enroll_report', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN NULL; END;', start_date => SYSTIMESTAMP, repeat_interval => 'FREQ=WEEKLY;BYDAY=MON;BYHOUR=9;BYMINUTE=0;BYSECOND=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to rename column DEPTNAME to DEPARTMENT_NAME in A_DEPARTMENTS."},{"role":"assistant","content":"ALTER TABLE A_DEPARTMENTS RENAME COLUMN DEPTNAME TO DEPARTMENT_NAME;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * A_COURSES WHERE DEPTID = 5;"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE DEPTID = 5;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students who have never enrolled in any course."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT STUDENTID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to remove a course and its enrollments given COURSEID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE remove_course(p_courseid NUMBER) IS BEGIN DELETE FROM A_ENROLLMENTS WHERE COURSEID = p_courseid; DELETE FROM A_COURSES WHERE COURSEID = p_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create a unique index on COURSENAME column of A_COURSES."},{"role":"assistant","content":"CREATE UNIQUE INDEX idx_unique_coursename ON A_COURSES(COURSENAME);"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job to purge old enrollments (older than 5 years) weekly."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'purge_old_enrollments', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DELETE FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -60); END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SUN;BYHOUR=3;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Use ALTER TABLE to add a new column EMAIL to A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS ADD (EMAIL VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: DELETE A_ENROLLMENTS WHERE COURSEID = 10;"},{"role":"assistant","content":"DELETE FROM A_ENROLLMENTS WHERE COURSEID = 10;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find departments that have no professors assigned."},{"role":"assistant","content":"SELECT * FROM A_DEPARTMENTS D WHERE NOT EXISTS (SELECT 1 FROM A_PROFESSORS P WHERE P.DEPTID = D.DEPTID);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function to return the number of courses offered by a department."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION count_courses_by_dept(p_deptid NUMBER) RETURN NUMBER IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_COURSES WHERE DEPTID = p_deptid; RETURN v_count; END;"}]}
{"messages":[{"role":"user","content":"Create a backup table for A_DEPARTMENTS with the same structure."},{"role":"assistant","content":"CREATE TABLE A_DEPARTMENTS_BACKUP AS SELECT * FROM A_DEPARTMENTS WHERE 1=0;"}]}
{"messages":[{"role":"user","content":"Write a CRON job to log current course count every day at midnight."},{"role":"assistant","content":"0 0 * * * echo \"SELECT COUNT(*) FROM A_COURSES;\" | sqlplus user/password@db >> /home/oracle/course_count.log"}]}
{"messages":[{"role":"user","content":"Export both A_STUDENTS and A_ENROLLMENTS tables using expdp."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=students_enrollments.dmp LOGFILE=students_enrollments.log TABLES=A_STUDENTS,A_ENROLLMENTS"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COURSENAME FROM A_COURSES GROUP WHERE DEPTID = 2;"},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE DEPTID = 2;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get each professor’s full name and the number of courses they teach."},{"role":"assistant","content":"SELECT P.PROFNAME, COUNT(C.COURSEID) AS NUM_COURSES FROM A_PROFESSORS P LEFT JOIN A_COURSES C ON P.PROFID = C.PROFID GROUP BY P.PROFNAME;"}]}
{"messages":[{"role":"user","content":"Create a trigger to automatically log new student registrations to a log table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_new_student AFTER INSERT ON A_STUDENTS FOR EACH ROW BEGIN INSERT INTO STUDENT_REG_LOG (STUDENTID, REGISTERED_AT) VALUES (:NEW.STUDENTID, SYSDATE); END;"}]}
{"messages":[{"role":"user","content":"Create a table partitioned by DEPTID for course records."},{"role":"assistant","content":"CREATE TABLE A_COURSES_PART (COURSEID NUMBER, COURSENAME VARCHAR2(100), DEPTID NUMBER, PROFID NUMBER) PARTITION BY LIST (DEPTID) (PARTITION dept_1 VALUES (1), PARTITION dept_2 VALUES (2), PARTITION dept_3 VALUES (3));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: INSERT A_STUDENTS (STUDENTID, FIRSTNAME) VALUES (101, 'Alice');"},{"role":"assistant","content":"INSERT INTO A_STUDENTS (STUDENTID, FIRSTNAME) VALUES (101, 'Alice');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list courses along with their department name."},{"role":"assistant","content":"SELECT C.COURSENAME, D.DEPTNAME FROM A_COURSES C JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to archive all enrollments for course ID 100."},{"role":"assistant","content":"BEGIN INSERT INTO ENROLLMENT_ARCHIVE SELECT * FROM A_ENROLLMENTS WHERE COURSEID = 100; DELETE FROM A_ENROLLMENTS WHERE COURSEID = 100; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create a DBMS_SCHEDULER job to send a report every first day of the month at 8 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'monthly_report_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN NULL; END;', repeat_interval => 'FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=8;BYMINUTE=0;BYSECOND=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE command to drop column BIRTHDATE from A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS DROP COLUMN BIRTHDATE;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all students along with the number of courses they are enrolled in."},{"role":"assistant","content":"SELECT S.STUDENTID, S.FIRSTNAME, S.LASTNAME, COUNT(E.COURSEID) AS ENROLLED_COURSES FROM A_STUDENTS S LEFT JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID GROUP BY S.STUDENTID, S.FIRSTNAME, S.LASTNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update a professor’s name based on their ID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_prof_name(p_profid NUMBER, p_newname VARCHAR2) IS BEGIN UPDATE A_PROFESSORS SET PROFNAME = p_newname WHERE PROFID = p_profid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create a tablespace named 'STUDENT_DATA' with 100MB size."},{"role":"assistant","content":"CREATE TABLESPACE STUDENT_DATA DATAFILE 'student_data.dbf' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;"}]}
{"messages":[{"role":"user","content":"Create a DBMS_SCHEDULER job to rebuild indexes every Sunday at 2 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'weekly_index_rebuild', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN EXECUTE IMMEDIATE ''ALTER INDEX ALL REBUILD''; END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SUN;BYHOUR=2;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Use ALTER TABLE to rename the column COURSENAME in A_COURSES to TITLE."},{"role":"assistant","content":"ALTER TABLE A_COURSES RENAME COLUMN COURSENAME TO TITLE;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * A_ENROLLMENTS WHERE ENROLLDATE > SYSDATE - 30;"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE > SYSDATE - 30;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students born after the year 2000."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE > TO_DATE('2000-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to automatically assign a default DEPTID when a new professor is inserted."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER assign_default_dept BEFORE INSERT ON A_PROFESSORS FOR EACH ROW BEGIN IF :NEW.DEPTID IS NULL THEN :NEW.DEPTID := 1; END IF; END;"}]}
{"messages":[{"role":"user","content":"Rebuild the index on A_ENROLLMENTS for performance optimization."},{"role":"assistant","content":"ALTER INDEX A_ENROLLMENTS_PK REBUILD;"}]}
{"messages":[{"role":"user","content":"Schedule a CRON job to back up the A_COURSES table daily at midnight."},{"role":"assistant","content":"0 0 * * * exp user/password TABLES=A_COURSES FILE=a_courses_backup.dmp LOG=a_courses_backup.log"}]}
{"messages":[{"role":"user","content":"Generate a script to export all tables in the schema 'A_' to a single dump file."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=a_schema_full.dmp LOGFILE=a_schema_full.log SCHEMAS=A"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT PROFNAME FROM A_PROFESSORS JOIN A_DEPARTMENTS USING PROFID;"},{"role":"assistant","content":"SELECT P.PROFNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to display the number of students per course."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS STUDENT_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL package for student utilities (add_student, get_student_by_id)."},{"role":"assistant","content":"CREATE OR REPLACE PACKAGE student_utils AS PROCEDURE add_student(p_id NUMBER, p_fname VARCHAR2, p_lname VARCHAR2); FUNCTION get_student_by_id(p_id NUMBER) RETURN A_STUDENTS%ROWTYPE; END student_utils; \n/\nCREATE OR REPLACE PACKAGE BODY student_utils AS PROCEDURE add_student(p_id NUMBER, p_fname VARCHAR2, p_lname VARCHAR2) IS BEGIN INSERT INTO A_STUDENTS (STUDENTID, FIRSTNAME, LASTNAME) VALUES (p_id, p_fname, p_lname); END; FUNCTION get_student_by_id(p_id NUMBER) RETURN A_STUDENTS%ROWTYPE IS v_student A_STUDENTS%ROWTYPE; BEGIN SELECT * INTO v_student FROM A_STUDENTS WHERE STUDENTID = p_id; RETURN v_student; END; END student_utils;"}]}
{"messages":[{"role":"user","content":"Add a new partition to A_COURSES_PART for DEPTID = 4."},{"role":"assistant","content":"ALTER TABLE A_COURSES_PART ADD PARTITION dept_4 VALUES (4);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COUNT(*) FROM A_STUDENTS GROUP BY FIRSTNAME,;"},{"role":"assistant","content":"SELECT COUNT(*) FROM A_STUDENTS GROUP BY FIRSTNAME;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to fetch professors teaching in more than one department."},{"role":"assistant","content":"SELECT PROFID FROM A_PROFESSORS GROUP BY PROFID HAVING COUNT(DISTINCT DEPTID) > 1;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to print total number of enrollments."},{"role":"assistant","content":"DECLARE v_total NUMBER; BEGIN SELECT COUNT(*) INTO v_total FROM A_ENROLLMENTS; DBMS_OUTPUT.PUT_LINE('Total Enrollments: ' || v_total); END;"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job to purge empty student records every month."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'purge_empty_students', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DELETE FROM A_STUDENTS WHERE FIRSTNAME IS NULL AND LASTNAME IS NULL; END;', repeat_interval => 'FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=0;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Drop the foreign key constraint between A_ENROLLMENTS and A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_ENROLLMENTS DROP CONSTRAINT fk_enroll_course;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get a list of courses along with the number of students enrolled in each."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS ENROLLMENT_COUNT FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update student last name given STUDENTID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_last_name(p_studentid NUMBER, p_lastname VARCHAR2) IS BEGIN UPDATE A_STUDENTS SET LASTNAME = p_lastname WHERE STUDENTID = p_studentid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Resize the tablespace 'STUDENT_DATA' to 500MB."},{"role":"assistant","content":"ALTER DATABASE DATAFILE 'student_data.dbf' RESIZE 500M;"}]}
{"messages":[{"role":"user","content":"Schedule a job using DBMS_SCHEDULER to generate a course report every Friday at 4 PM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'weekly_course_report', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN NULL; END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=FRI;BYHOUR=16;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE script to change the length of LASTNAME column to 100 in A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY (LASTNAME VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_PROFESSORS WHERE DEPTID == 2;"},{"role":"assistant","content":"SELECT * FROM A_PROFESSORS WHERE DEPTID = 2;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all students with their age."},{"role":"assistant","content":"SELECT STUDENTID, FIRSTNAME, LASTNAME, TRUNC(MONTHS_BETWEEN(SYSDATE, BIRTHDATE)/12) AS AGE FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Create a trigger to prevent deletion from A_COURSES if enrollments exist."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_prevent_course_delete BEFORE DELETE ON A_COURSES FOR EACH ROW BEGIN IF EXISTS (SELECT 1 FROM A_ENROLLMENTS WHERE COURSEID = :OLD.COURSEID) THEN RAISE_APPLICATION_ERROR(-20001, 'Cannot delete course with enrollments'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Create a partitioned table from A_STUDENTS by year of birth."},{"role":"assistant","content":"CREATE TABLE A_STUDENTS_PART (STUDENTID NUMBER, FIRSTNAME VARCHAR2(50), LASTNAME VARCHAR2(50), BIRTHDATE DATE) PARTITION BY RANGE (BIRTHDATE) (PARTITION p_1990s VALUES LESS THAN (TO_DATE('2000-01-01','YYYY-MM-DD')), PARTITION p_2000s VALUES LESS THAN (TO_DATE('2010-01-01','YYYY-MM-DD')));"}]}
{"messages":[{"role":"user","content":"Use CRON to delete backups older than 30 days from backup folder."},{"role":"assistant","content":"0 3 * * * find /home/oracle/backups -name '*.dmp' -type f -mtime +30 -exec rm {} \\;"}]}
{"messages":[{"role":"user","content":"Export only A_PROFESSORS table using Data Pump."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=professors.dmp LOGFILE=professors.log TABLES=A_PROFESSORS"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COURSENAME FROM A_COURSES WHERE DEPTID IN '2', '3';"},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE DEPTID IN (2, 3);"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all departments along with the number of professors in each."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(P.PROFID) AS PROFESSOR_COUNT FROM A_DEPARTMENTS D LEFT JOIN A_PROFESSORS P ON D.DEPTID = P.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function to return full student name given STUDENTID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_full_name(p_studentid NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT FIRSTNAME || ' ' || LASTNAME INTO v_name FROM A_STUDENTS WHERE STUDENTID = p_studentid; RETURN v_name; END;"}]}
{"messages":[{"role":"user","content":"Add a constraint to ensure PROFNAME is not null in A_PROFESSORS."},{"role":"assistant","content":"ALTER TABLE A_PROFESSORS MODIFY (PROFNAME CONSTRAINT profname_not_null NOT NULL);"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job to archive enrollments quarterly."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'archive_enrollments_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN INSERT INTO ENROLLMENTS_ARCHIVE SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -3); DELETE FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -3); END;', repeat_interval => 'FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=2;BYMINUTE=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: INSERT INTO A_STUDENTS VALUES 100, 'John', 'Doe';"},{"role":"assistant","content":"INSERT INTO A_STUDENTS (STUDENTID, FIRSTNAME, LASTNAME) VALUES (100, 'John', 'Doe');"}]}
{"messages":[{"role":"user","content":"Create a SQL query to fetch professors who teach more than 3 courses."},{"role":"assistant","content":"SELECT P.PROFNAME FROM A_PROFESSORS P JOIN A_COURSES C ON P.PROFID = C.PROFID GROUP BY P.PROFNAME HAVING COUNT(C.COURSEID) > 3;"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block that prints the number of students not enrolled in any course."},{"role":"assistant","content":"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT STUDENTID FROM A_ENROLLMENTS); DBMS_OUTPUT.PUT_LINE('Unenrolled students: ' || v_count); END;"}]}
{"messages":[{"role":"user","content":"Drop a column named TEMP_COL from A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES DROP COLUMN TEMP_COL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students who enrolled in any course after January 1, 2023."},{"role":"assistant","content":"SELECT S.STUDENTID, S.FIRSTNAME, S.LASTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE E.ENROLLDATE > TO_DATE('2023-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to assign a professor to a course."},{"role":"assistant","content":"BEGIN UPDATE A_COURSES SET PROFID = 105 WHERE COURSEID = 203; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create an index on DEPTID in A_COURSES to improve join performance."},{"role":"assistant","content":"CREATE INDEX idx_deptid_courses ON A_COURSES (DEPTID);"}]}
{"messages":[{"role":"user","content":"Schedule a daily job using DBMS_SCHEDULER to purge audit logs older than 7 days."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'purge_audit_logs', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DELETE FROM AUDIT_LOG WHERE LOG_DATE < SYSDATE - 7; COMMIT; END;', repeat_interval => 'FREQ=DAILY;BYHOUR=2;BYMINUTE=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Write an ALTER TABLE script to add EMAIL column to A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS ADD (EMAIL VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = '2023-04-01';"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = TO_DATE('2023-04-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list courses taught by professors from the 'Computer Science' department."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Computer Science';"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger that logs deleted students into a backup table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_student_delete BEFORE DELETE ON A_STUDENTS FOR EACH ROW BEGIN INSERT INTO A_STUDENTS_ARCHIVE VALUES (:OLD.STUDENTID, :OLD.FIRSTNAME, :OLD.LASTNAME, :OLD.BIRTHDATE); END;"}]}
{"messages":[{"role":"user","content":"Resize the datafile of USERS tablespace to 2GB."},{"role":"assistant","content":"ALTER DATABASE DATAFILE '/u01/app/oracle/oradata/ORCL/users01.dbf' RESIZE 2G;"}]}
{"messages":[{"role":"user","content":"Create a CRON job to export A_COURSES table weekly."},{"role":"assistant","content":"0 3 * * 0 expdp user/password tables=A_COURSES directory=DATA_PUMP_DIR dumpfile=courses.dmp logfile=courses.log"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT STUDENTID, FIRSTNAME + LASTNAME FROM A_STUDENTS;"},{"role":"assistant","content":"SELECT STUDENTID, FIRSTNAME || ' ' || LASTNAME AS FULLNAME FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write a query to find the course with the highest number of enrollments."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME ORDER BY COUNT(E.STUDENTID) DESC FETCH FIRST 1 ROWS ONLY;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to insert a new student."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE insert_student(p_id NUMBER, p_first VARCHAR2, p_last VARCHAR2, p_birth DATE) IS BEGIN INSERT INTO A_STUDENTS(STUDENTID, FIRSTNAME, LASTNAME, BIRTHDATE) VALUES (p_id, p_first, p_last, p_birth); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Enable auto-extend on the tablespace datafile."},{"role":"assistant","content":"ALTER DATABASE DATAFILE '/u01/app/oracle/oradata/ORCL/users01.dbf' AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED;"}]}
{"messages":[{"role":"user","content":"Create a DBMS_SCHEDULER job to refresh a materialized view every hour."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'refresh_mv_hourly', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DBMS_MVIEW.REFRESH(''MV_ENROLLMENTS''); END;', repeat_interval => 'FREQ=HOURLY', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Generate a script to rename column FIRSTNAME to GIVEN_NAME in A_STUDENTS."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS RENAME COLUMN FIRSTNAME TO GIVEN_NAME;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: DELETE FROM A_PROFESSORS WHERE PROFID = 'abc';"},{"role":"assistant","content":"-- PROFID is a NUMBER, so use numeric value or cast properly\nDELETE FROM A_PROFESSORS WHERE PROFID = TO_NUMBER('abc'); -- if 'abc' is valid numerically\n-- or fix the value to a proper number, e.g., DELETE FROM A_PROFESSORS WHERE PROFID = 100;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get total number of courses per department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_DEPARTMENTS D LEFT JOIN A_COURSES C ON D.DEPTID = C.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to delete students born before 1990."},{"role":"assistant","content":"BEGIN DELETE FROM A_STUDENTS WHERE BIRTHDATE < TO_DATE('1990-01-01', 'YYYY-MM-DD'); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Drop the index on A_COURSES.DEPTID if exists."},{"role":"assistant","content":"DROP INDEX idx_deptid_courses;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list the full names of students enrolled in course ID 105."},{"role":"assistant","content":"SELECT S.FIRSTNAME || ' ' || S.LASTNAME AS FULL_NAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID WHERE E.COURSEID = 105;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to enroll a student into a course."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE enroll_student(p_studentid NUMBER, p_courseid NUMBER) IS BEGIN INSERT INTO A_ENROLLMENTS (STUDENTID, COURSEID, ENROLLDATE) VALUES (p_studentid, p_courseid, SYSDATE); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create a tablespace named COURSE_DATA with initial size 100MB."},{"role":"assistant","content":"CREATE TABLESPACE COURSE_DATA DATAFILE 'course_data01.dbf' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;"}]}
{"messages":[{"role":"user","content":"Schedule a weekly job using DBMS_SCHEDULER to recalculate enrollment stats every Sunday at midnight."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'weekly_enrollment_stats', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN recalculate_enrollment_stats(); END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SUN;BYHOUR=0;BYMINUTE=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Alter A_STUDENTS table to drop the BIRTHDATE column."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS DROP COLUMN BIRTHDATE;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_STUDENTS WHERE BIRTHDATE > 01-01-2000;"},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE > TO_DATE('2000-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to count how many students each professor teaches."},{"role":"assistant","content":"SELECT P.PROFNAME, COUNT(E.STUDENTID) AS STUDENT_COUNT FROM A_PROFESSORS P JOIN A_COURSES C ON P.PROFID = C.PROFID JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY P.PROFNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function that returns the department name for a given course ID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_dept_name(p_courseid NUMBER) RETURN VARCHAR2 IS v_deptname VARCHAR2(100); BEGIN SELECT D.DEPTNAME INTO v_deptname FROM A_COURSES C JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID WHERE C.COURSEID = p_courseid; RETURN v_deptname; END;"}]}
{"messages":[{"role":"user","content":"Create a backup of the A_ENROLLMENTS table using Data Pump export."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=enrollments_backup.dmp LOGFILE=enrollments_backup.log TABLES=A_ENROLLMENTS"}]}
{"messages":[{"role":"user","content":"Schedule a CRON job to remove logs older than 15 days."},{"role":"assistant","content":"0 2 * * * find /var/log/oracle -name '*.log' -mtime +15 -exec rm -f {} \\;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_COURSES WHERE COURSENAME LIKE %Math%;"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE COURSENAME LIKE '%Math%';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find professors who don't teach any courses."},{"role":"assistant","content":"SELECT PROFNAME FROM A_PROFESSORS WHERE PROFID NOT IN (SELECT PROFID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to automatically assign current date to ENROLLDATE when a new enrollment is inserted."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_auto_enrolldate BEFORE INSERT ON A_ENROLLMENTS FOR EACH ROW BEGIN :NEW.ENROLLDATE := SYSDATE; END;"}]}
{"messages":[{"role":"user","content":"Add a new column IS_ACTIVE to A_PROFESSORS with default value 'Y'."},{"role":"assistant","content":"ALTER TABLE A_PROFESSORS ADD (IS_ACTIVE CHAR(1) DEFAULT 'Y');"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job that runs a health check every hour."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'hourly_health_check', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN perform_health_check(); END;', repeat_interval => 'FREQ=HOURLY;', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT DEPTNAME, COUNT(*) FROM A_PROFESSORS GROUPBY DEPTNAME;"},{"role":"assistant","content":"SELECT DEPTNAME, COUNT(*) FROM A_PROFESSORS GROUP BY DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find students who are not enrolled in any course."},{"role":"assistant","content":"SELECT STUDENTID, FIRSTNAME, LASTNAME FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT STUDENTID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to delete all enrollments for a given course."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE delete_course_enrollments(p_courseid NUMBER) IS BEGIN DELETE FROM A_ENROLLMENTS WHERE COURSEID = p_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Drop the constraint profname_not_null from A_PROFESSORS table."},{"role":"assistant","content":"ALTER TABLE A_PROFESSORS DROP CONSTRAINT profname_not_null;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COUNT STUDENTID FROM A_ENROLLMENTS;"},{"role":"assistant","content":"SELECT COUNT(STUDENTID) FROM A_ENROLLMENTS;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find the number of students enrolled in each course."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS NUM_STUDENTS FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID GROUP BY C.COURSENAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL package to manage professor assignments."},{"role":"assistant","content":"CREATE OR REPLACE PACKAGE prof_mgmt AS PROCEDURE assign_prof(p_courseid NUMBER, p_profid NUMBER); END prof_mgmt; /\nCREATE OR REPLACE PACKAGE BODY prof_mgmt AS PROCEDURE assign_prof(p_courseid NUMBER, p_profid NUMBER) IS BEGIN UPDATE A_COURSES SET PROFID = p_profid WHERE COURSEID = p_courseid; COMMIT; END assign_prof; END prof_mgmt;"}]}
{"messages":[{"role":"user","content":"Grant SELECT and INSERT privileges on A_ENROLLMENTS to user 'REPORT_USER'."},{"role":"assistant","content":"GRANT SELECT, INSERT ON A_ENROLLMENTS TO REPORT_USER;"}]}
{"messages":[{"role":"user","content":"Schedule a job using DBMS_SCHEDULER to back up the A_STUDENTS table every Friday night at 11 PM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'backup_students_weekly', job_type => 'EXECUTABLE', job_action => '/home/oracle/scripts/backup_students.sh', repeat_interval => 'FREQ=WEEKLY;BYDAY=FRI;BYHOUR=23;BYMINUTE=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Alter A_ENROLLMENTS table to add a STATUS column with default value 'ACTIVE'."},{"role":"assistant","content":"ALTER TABLE A_ENROLLMENTS ADD (STATUS VARCHAR2(20) DEFAULT 'ACTIVE');"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE BETWEEN 01/01/2023 AND 12/31/2023;"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE BETWEEN TO_DATE('2023-01-01','YYYY-MM-DD') AND TO_DATE('2023-12-31','YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find departments with no courses assigned."},{"role":"assistant","content":"SELECT D.DEPTNAME FROM A_DEPARTMENTS D WHERE D.DEPTID NOT IN (SELECT DISTINCT DEPTID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to prevent deleting a professor if they are assigned to a course."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_prevent_prof_delete BEFORE DELETE ON A_PROFESSORS FOR EACH ROW DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_COURSES WHERE PROFID = :OLD.PROFID; IF v_count > 0 THEN RAISE_APPLICATION_ERROR(-20001, 'Cannot delete professor assigned to a course.'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Create a new tablespace for department-related tables."},{"role":"assistant","content":"CREATE TABLESPACE dept_data DATAFILE 'dept_data01.dbf' SIZE 200M AUTOEXTEND ON NEXT 50M MAXSIZE 2G;"}]}
{"messages":[{"role":"user","content":"Create a CRON job to clean up temporary files in /tmp every day at midnight."},{"role":"assistant","content":"0 0 * * * find /tmp -type f -name '*.tmp' -mtime +1 -exec rm {} \\;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT STUDENTID, ENROLLDATE FROM A_ENROLLMENTS WHERE ENROLLDATE > '2022-01-01';"},{"role":"assistant","content":"SELECT STUDENTID, ENROLLDATE FROM A_ENROLLMENTS WHERE ENROLLDATE > TO_DATE('2022-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get professors and the number of courses they are teaching."},{"role":"assistant","content":"SELECT P.PROFNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_PROFESSORS P LEFT JOIN A_COURSES C ON P.PROFID = C.PROFID GROUP BY P.PROFNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to transfer a course to another department."},{"role":"assistant","content":"DECLARE v_courseid NUMBER := 101; v_new_deptid NUMBER := 3; BEGIN UPDATE A_COURSES SET DEPTID = v_new_deptid WHERE COURSEID = v_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Add a NOT NULL constraint on COURSENAME in A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES MODIFY (COURSENAME VARCHAR2(100) NOT NULL);"}]}
{"messages":[{"role":"user","content":"Schedule a job that runs every 5 minutes to check recent enrollments."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'check_recent_enrollments', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN check_recent_enrollments_proc(); END;', repeat_interval => 'FREQ=MINUTELY;INTERVAL=5', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_PROFESSORS WHERE DEPTID = '10';"},{"role":"assistant","content":"SELECT * FROM A_PROFESSORS WHERE DEPTID = 10; -- DEPTID is NUMBER, not string"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list the names of students and their professors."},{"role":"assistant","content":"SELECT S.FIRSTNAME || ' ' || S.LASTNAME AS STUDENT_NAME, P.PROFNAME FROM A_ENROLLMENTS E JOIN A_STUDENTS S ON E.STUDENTID = S.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_PROFESSORS P ON C.PROFID = P.PROFID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to bulk delete students with no enrollments."},{"role":"assistant","content":"BEGIN DELETE FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT DISTINCT STUDENTID FROM A_ENROLLMENTS); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Drop and recreate the primary key on A_DEPARTMENTS.DEPTID."},{"role":"assistant","content":"ALTER TABLE A_DEPARTMENTS DROP PRIMARY KEY; ALTER TABLE A_DEPARTMENTS ADD CONSTRAINT pk_dept PRIMARY KEY (DEPTID);"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * A_COURSES WHERE DEPTID IN (SELECT DEPTID FROM A_DEPARTMENTS WHERE DEPTNAME = 'Math');"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE DEPTID IN (SELECT DEPTID FROM A_DEPARTMENTS WHERE DEPTNAME = 'Math');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find the names of all professors in the 'Computer Science' department."},{"role":"assistant","content":"SELECT P.PROFNAME FROM A_PROFESSORS P JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Computer Science';"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update a student's last name by student ID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_lastname(p_studentid NUMBER, p_lastname VARCHAR2) IS BEGIN UPDATE A_STUDENTS SET LASTNAME = p_lastname WHERE STUDENTID = p_studentid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create an index on COURSENAME in the A_COURSES table."},{"role":"assistant","content":"CREATE INDEX idx_course_name ON A_COURSES(COURSENAME);"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job that runs every 10 minutes to archive logs."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'archive_logs_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN archive_logs(); END;', repeat_interval => 'FREQ=MINUTELY;INTERVAL=10', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Alter the A_STUDENTS table to modify LASTNAME to VARCHAR2(100)."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY (LASTNAME VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = '15-MAR-2024';"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE = TO_DATE('15-MAR-2024','DD-MON-YYYY');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the total number of students enrolled per department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(E.STUDENTID) AS TOTAL_ENROLLED FROM A_ENROLLMENTS E JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function that returns the number of students in a given course."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_student_count(p_courseid NUMBER) RETURN NUMBER IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE COURSEID = p_courseid; RETURN v_count; END;"}]}
{"messages":[{"role":"user","content":"Export the A_PROFESSORS table using Data Pump."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=professors.dmp LOGFILE=professors.log TABLES=A_PROFESSORS"}]}
{"messages":[{"role":"user","content":"Create a CRON job to run a PL/SQL script every Monday at 6 AM."},{"role":"assistant","content":"0 6 * * MON /u01/app/oracle/scripts/run_weekly_script.sh"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT STUDENTID, ENROLLDATE FROM A_ENROLLMENTS WHERE ENROLLDATE >= 2023-01-01;"},{"role":"assistant","content":"SELECT STUDENTID, ENROLLDATE FROM A_ENROLLMENTS WHERE ENROLLDATE >= TO_DATE('2023-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list students along with their enrolled course names and professor names."},{"role":"assistant","content":"SELECT S.FIRSTNAME || ' ' || S.LASTNAME AS STUDENT_NAME, C.COURSENAME, P.PROFNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_PROFESSORS P ON C.PROFID = P.PROFID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger that logs inserts into A_COURSES table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_log_course_insert AFTER INSERT ON A_COURSES FOR EACH ROW BEGIN INSERT INTO course_log (COURSEID, ACTION_DATE) VALUES (:NEW.COURSEID, SYSDATE); END;"}]}
{"messages":[{"role":"user","content":"Drop the STATUS column from A_ENROLLMENTS."},{"role":"assistant","content":"ALTER TABLE A_ENROLLMENTS DROP COLUMN STATUS;"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job to update statistics daily at 3 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'daily_stats_update', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DBMS_STATS.gather_schema_stats(ownname => ''MY_SCHEMA''); END;', repeat_interval => 'FREQ=DAILY;BYHOUR=3', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COURSENAME FROM A_COURSES WHERE DEPTID = NULL;"},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE DEPTID IS NULL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list courses with no enrolled students."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C WHERE C.COURSEID NOT IN (SELECT DISTINCT COURSEID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to transfer a professor from one department to another."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE transfer_professor(p_profid NUMBER, p_new_deptid NUMBER) IS BEGIN UPDATE A_PROFESSORS SET DEPTID = p_new_deptid WHERE PROFID = p_profid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Rename the column COURSENAME in A_COURSES to TITLE."},{"role":"assistant","content":"ALTER TABLE A_COURSES RENAME COLUMN COURSENAME TO TITLE;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COUNT(*) FROM A_ENROLLMENTS GROUPED BY COURSEID;"},{"role":"assistant","content":"SELECT COURSEID, COUNT(*) FROM A_ENROLLMENTS GROUP BY COURSEID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list the number of courses offered by each department."},{"role":"assistant","content":"SELECT D.DEPTNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_DEPARTMENTS D LEFT JOIN A_COURSES C ON D.DEPTID = C.DEPTID GROUP BY D.DEPTNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL function that returns the full name of a student given their student ID."},{"role":"assistant","content":"CREATE OR REPLACE FUNCTION get_student_fullname(p_studentid NUMBER) RETURN VARCHAR2 IS v_fullname VARCHAR2(200); BEGIN SELECT FIRSTNAME || ' ' || LASTNAME INTO v_fullname FROM A_STUDENTS WHERE STUDENTID = p_studentid; RETURN v_fullname; END;"}]}
{"messages":[{"role":"user","content":"Rebuild all indexes in the A_COURSES table."},{"role":"assistant","content":"ALTER INDEX ALL ON A_COURSES REBUILD;"}]}
{"messages":[{"role":"user","content":"Schedule a job to purge old enrollments older than 5 years, every Sunday at midnight."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'purge_old_enrollments', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DELETE FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -60); COMMIT; END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SUN;BYHOUR=0;BYMINUTE=0', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Add a unique constraint on COURSENAME in A_COURSES."},{"role":"assistant","content":"ALTER TABLE A_COURSES ADD CONSTRAINT uq_course_name UNIQUE (COURSENAME);"}]}
{"messages":[{"role":"user","content":"Fix this SQL: SELECT * FROM A_STUDENTS WHERE BIRTHDATE = '1995-07-21';"},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE = TO_DATE('1995-07-21', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Write a SQL query to get the names of students who have not enrolled in any course."},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME FROM A_STUDENTS WHERE STUDENTID NOT IN (SELECT DISTINCT STUDENTID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL trigger to prevent enrolling a student in the same course twice."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_prevent_duplicate_enroll BEFORE INSERT ON A_ENROLLMENTS FOR EACH ROW DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_ENROLLMENTS WHERE STUDENTID = :NEW.STUDENTID AND COURSEID = :NEW.COURSEID; IF v_count > 0 THEN RAISE_APPLICATION_ERROR(-20002, 'Duplicate enrollment not allowed.'); END IF; END;"}]}
{"messages":[{"role":"user","content":"Create a new partition for the A_ENROLLMENTS table based on ENROLLDATE."},{"role":"assistant","content":"ALTER TABLE A_ENROLLMENTS MODIFY PARTITION BY RANGE (ENROLLDATE) ( PARTITION enroll_2023 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')), PARTITION enroll_2024 VALUES LESS THAN (TO_DATE('2025-01-01','YYYY-MM-DD')) );"}]}
{"messages":[{"role":"user","content":"Create a CRON job that checks disk space every hour."},{"role":"assistant","content":"0 * * * * df -h > /var/log/disk_usage.log"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT FIRSTNAME + LASTNAME AS NAME FROM A_STUDENTS;"},{"role":"assistant","content":"SELECT FIRSTNAME || ' ' || LASTNAME AS NAME FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to show each course along with the number of enrolled students and the professor's name."},{"role":"assistant","content":"SELECT C.COURSENAME, COUNT(E.STUDENTID) AS NUM_ENROLLED, P.PROFNAME FROM A_COURSES C LEFT JOIN A_ENROLLMENTS E ON C.COURSEID = E.COURSEID LEFT JOIN A_PROFESSORS P ON C.PROFID = P.PROFID GROUP BY C.COURSENAME, P.PROFNAME;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to delete all enrollments of a student."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE delete_student_enrollments(p_studentid NUMBER) IS BEGIN DELETE FROM A_ENROLLMENTS WHERE STUDENTID = p_studentid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Drop the index idx_course_name from A_COURSES."},{"role":"assistant","content":"DROP INDEX idx_course_name;"}]}
{"messages":[{"role":"user","content":"Schedule a job to refresh materialized views every day at 2 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'refresh_mv_job', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DBMS_MVIEW.REFRESH(''mv_example''); END;', repeat_interval => 'FREQ=DAILY;BYHOUR=2', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_COURSES WHERE PROFID = NULL;"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE PROFID IS NULL;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find courses taught by professors from the 'Mathematics' department."},{"role":"assistant","content":"SELECT C.COURSENAME FROM A_COURSES C JOIN A_PROFESSORS P ON C.PROFID = P.PROFID JOIN A_DEPARTMENTS D ON P.DEPTID = D.DEPTID WHERE D.DEPTNAME = 'Mathematics';"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block that prints the total number of courses in the system."},{"role":"assistant","content":"DECLARE v_total NUMBER; BEGIN SELECT COUNT(*) INTO v_total FROM A_COURSES; DBMS_OUTPUT.PUT_LINE('Total courses: ' || v_total); END;"}]}
{"messages":[{"role":"user","content":"Export all student data using Data Pump to a custom directory."},{"role":"assistant","content":"expdp user/password DIRECTORY=STUDENT_EXPORT_DIR DUMPFILE=students.dmp LOGFILE=students_export.log TABLES=A_STUDENTS"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT COUNT(*) AS TOTAL FROM A_PROFESSORS GROUPED BY DEPTID;"},{"role":"assistant","content":"SELECT DEPTID, COUNT(*) AS TOTAL FROM A_PROFESSORS GROUP BY DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to list all students born after January 1, 2000."},{"role":"assistant","content":"SELECT * FROM A_STUDENTS WHERE BIRTHDATE > TO_DATE('2000-01-01', 'YYYY-MM-DD');"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to insert a new course."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE add_course(p_courseid NUMBER, p_coursename VARCHAR2, p_deptid NUMBER, p_profid NUMBER) IS BEGIN INSERT INTO A_COURSES (COURSEID, COURSENAME, DEPTID, PROFID) VALUES (p_courseid, p_coursename, p_deptid, p_profid); COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create a tablespace named 'USERS_DATA' with 100MB size."},{"role":"assistant","content":"CREATE TABLESPACE USERS_DATA DATAFILE '/u01/app/oracle/oradata/users_data01.dbf' SIZE 100M AUTOEXTEND ON NEXT 10M;"}]}
{"messages":[{"role":"user","content":"Schedule a job using DBMS_SCHEDULER to delete enrollments older than 10 years weekly."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'delete_old_enrollments', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DELETE FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -120); COMMIT; END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SUN', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Alter A_STUDENTS to add a column 'EMAIL' with VARCHAR2(255)."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS ADD (EMAIL VARCHAR2(255));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_ENROLLMENTS WHERE STUDENTID = '123';"},{"role":"assistant","content":"SELECT * FROM A_ENROLLMENTS WHERE STUDENTID = 123;"}]}
{"messages":[{"role":"user","content":"Write a query to list professors with the number of courses they teach."},{"role":"assistant","content":"SELECT P.PROFNAME, COUNT(C.COURSEID) AS COURSE_COUNT FROM A_PROFESSORS P LEFT JOIN A_COURSES C ON P.PROFID = C.PROFID GROUP BY P.PROFNAME;"}]}
{"messages":[{"role":"user","content":"Create a trigger that updates a 'last_modified' column in A_COURSES on UPDATE."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_update_last_modified BEFORE UPDATE ON A_COURSES FOR EACH ROW BEGIN :NEW.last_modified := SYSDATE; END;"}]}
{"messages":[{"role":"user","content":"Create a partition on A_ENROLLMENTS by year of ENROLLDATE."},{"role":"assistant","content":"ALTER TABLE A_ENROLLMENTS PARTITION BY RANGE (EXTRACT(YEAR FROM ENROLLDATE)) (PARTITION p_2022 VALUES LESS THAN (2023), PARTITION p_2023 VALUES LESS THAN (2024));"}]}
{"messages":[{"role":"user","content":"Schedule a CRON job to run an export every day at 1 AM."},{"role":"assistant","content":"0 1 * * * /u01/app/oracle/scripts/export_data.sh"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT FIRSTNAME, LASTNAME FROM A_STUDENTS WHERE STUDENTID LIKE 101;"},{"role":"assistant","content":"SELECT FIRSTNAME, LASTNAME FROM A_STUDENTS WHERE STUDENTID = 101;"}]}
{"messages":[{"role":"user","content":"Write a query to list students along with their department names via their courses."},{"role":"assistant","content":"SELECT S.FIRSTNAME, S.LASTNAME, D.DEPTNAME FROM A_STUDENTS S JOIN A_ENROLLMENTS E ON S.STUDENTID = E.STUDENTID JOIN A_COURSES C ON E.COURSEID = C.COURSEID JOIN A_DEPARTMENTS D ON C.DEPTID = D.DEPTID;"}]}
{"messages":[{"role":"user","content":"Create a procedure to assign a professor to a course."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE assign_professor(p_courseid NUMBER, p_profid NUMBER) IS BEGIN UPDATE A_COURSES SET PROFID = p_profid WHERE COURSEID = p_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Drop the tablespace USERS_DATA."},{"role":"assistant","content":"DROP TABLESPACE USERS_DATA INCLUDING CONTENTS AND DATAFILES;"}]}
{"messages":[{"role":"user","content":"Schedule a job to refresh stats every Sunday at 11 PM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'weekly_stats_refresh', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DBMS_STATS.gather_schema_stats(''MY_SCHEMA''); END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SUN;BYHOUR=23', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_PROFESSORS WHERE PROFNAME == 'Smith';"},{"role":"assistant","content":"SELECT * FROM A_PROFESSORS WHERE PROFNAME = 'Smith';"}]}
{"messages":[{"role":"user","content":"Write a query to find courses without any assigned professor."},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE PROFID IS NULL;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL block to count total students and print result."},{"role":"assistant","content":"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_STUDENTS; DBMS_OUTPUT.PUT_LINE('Total students: ' || v_count); END;"}]}
{"messages":[{"role":"user","content":"Export A_COURSES table data to dump file courses.dmp."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=courses.dmp LOGFILE=courses_export.log TABLES=A_COURSES"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT DEPTID, COUNT(*) AS NUM FROM A_PROFESSORS GROUPED BY DEPTID;"},{"role":"assistant","content":"SELECT DEPTID, COUNT(*) AS NUM FROM A_PROFESSORS GROUP BY DEPTID;"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find the total number of students enrolled in each course."},{"role":"assistant","content":"SELECT COURSEID, COUNT(STUDENTID) AS TOTAL_ENROLLED FROM A_ENROLLMENTS GROUP BY COURSEID;"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to update a professor's department."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE update_prof_department(p_profid NUMBER, p_deptid NUMBER) IS BEGIN UPDATE A_PROFESSORS SET DEPTID = p_deptid WHERE PROFID = p_profid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Create an index on the COURSENAME column in A_COURSES."},{"role":"assistant","content":"CREATE INDEX idx_coursename ON A_COURSES(COURSENAME);"}]}
{"messages":[{"role":"user","content":"Schedule a DBMS_SCHEDULER job to archive enrollments older than 3 years monthly."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'archive_old_enrollments', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN INSERT INTO enrollments_archive SELECT * FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -36); DELETE FROM A_ENROLLMENTS WHERE ENROLLDATE < ADD_MONTHS(SYSDATE, -36); COMMIT; END;', repeat_interval => 'FREQ=MONTHLY;BYMONTHDAY=1', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Alter A_STUDENTS table to increase FIRSTNAME length to 100."},{"role":"assistant","content":"ALTER TABLE A_STUDENTS MODIFY (FIRSTNAME VARCHAR2(100));"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_DEPARTMENTS WHERE DEPTNAME = \"Science\";"},{"role":"assistant","content":"SELECT * FROM A_DEPARTMENTS WHERE DEPTNAME = 'Science';"}]}
{"messages":[{"role":"user","content":"Write a SQL query to find professors who teach more than 2 courses."},{"role":"assistant","content":"SELECT PROFID, COUNT(*) AS COURSE_COUNT FROM A_COURSES GROUP BY PROFID HAVING COUNT(*) > 2;"}]}
{"messages":[{"role":"user","content":"Create a trigger to log changes in the A_PROFESSORS table to a separate audit table."},{"role":"assistant","content":"CREATE OR REPLACE TRIGGER trg_professor_audit AFTER UPDATE ON A_PROFESSORS FOR EACH ROW BEGIN INSERT INTO A_PROFESSORS_AUDIT (PROFID, OLD_DEPTID, NEW_DEPTID, CHANGE_DATE) VALUES (:OLD.PROFID, :OLD.DEPTID, :NEW.DEPTID, SYSDATE); END;"}]}
{"messages":[{"role":"user","content":"Create partitions on A_ENROLLMENTS by year for 2020 and 2021."},{"role":"assistant","content":"ALTER TABLE A_ENROLLMENTS PARTITION BY RANGE (EXTRACT(YEAR FROM ENROLLDATE)) (PARTITION p_2020 VALUES LESS THAN (2021), PARTITION p_2021 VALUES LESS THAN (2022));"}]}
{"messages":[{"role":"user","content":"Set up a cron job to backup the Oracle database at 3 AM daily."},{"role":"assistant","content":"0 3 * * * /u01/app/oracle/backup_scripts/backup.sh"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT FIRSTNAME || LASTNAME AS FULLNAME FROM A_STUDENTS;"},{"role":"assistant","content":"SELECT FIRSTNAME || ' ' || LASTNAME AS FULLNAME FROM A_STUDENTS;"}]}
{"messages":[{"role":"user","content":"Write a query to find all courses that have no students enrolled."},{"role":"assistant","content":"SELECT COURSENAME FROM A_COURSES WHERE COURSEID NOT IN (SELECT COURSEID FROM A_ENROLLMENTS);"}]}
{"messages":[{"role":"user","content":"Create a PL/SQL procedure to delete enrollments by course ID."},{"role":"assistant","content":"CREATE OR REPLACE PROCEDURE delete_enrollments_by_course(p_courseid NUMBER) IS BEGIN DELETE FROM A_ENROLLMENTS WHERE COURSEID = p_courseid; COMMIT; END;"}]}
{"messages":[{"role":"user","content":"Drop index idx_coursename on A_COURSES."},{"role":"assistant","content":"DROP INDEX idx_coursename;"}]}
{"messages":[{"role":"user","content":"Schedule a job to gather stats every Saturday at 1 AM."},{"role":"assistant","content":"BEGIN DBMS_SCHEDULER.create_job( job_name => 'weekly_stats_gather', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN DBMS_STATS.gather_schema_stats(''MY_SCHEMA''); END;', repeat_interval => 'FREQ=WEEKLY;BYDAY=SAT;BYHOUR=1', enabled => TRUE); END;"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT * FROM A_COURSES WHERE COURSENAME LIKE '%Maths';"},{"role":"assistant","content":"SELECT * FROM A_COURSES WHERE COURSENAME LIKE '%Maths%';"}]}
{"messages":[{"role":"user","content":"Find departments with no courses offered."},{"role":"assistant","content":"SELECT DEPTNAME FROM A_DEPARTMENTS WHERE DEPTID NOT IN (SELECT DEPTID FROM A_COURSES);"}]}
{"messages":[{"role":"user","content":"Write a PL/SQL block to print the total number of professors."},{"role":"assistant","content":"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM A_PROFESSORS; DBMS_OUTPUT.PUT_LINE('Total professors: ' || v_count); END;"}]}
{"messages":[{"role":"user","content":"Export A_ENROLLMENTS data to dump file enrollments.dmp."},{"role":"assistant","content":"expdp user/password DIRECTORY=DATA_PUMP_DIR DUMPFILE=enrollments.dmp LOGFILE=enrollments_export.log TABLES=A_ENROLLMENTS"}]}
{"messages":[{"role":"user","content":"Fix the SQL: SELECT STUDENTID, COUNT(*) FROM A_ENROLLMENTS GROUPED BY STUDENTID;"},{"role":"assistant","content":"SELECT STUDENTID, COUNT(*) FROM A_ENROLLMENTS GROUP BY STUDENTID;"}]}